/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-07-22 21:53:01 UTC)
 * on 2014-10-16 at 06:19:39 UTC 
 * Modify at your own risk.
 */

package com.gcm.locationlistenerendpoint.model;

/**
 * Model definition for LocationListener.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the locationlistenerendpoint. For a detailed explanation
 * see:
 * <a href="http://code.google.com/p/google-http-java-client/wiki/JSON">http://code.google.com/p/google-http-java-client/wiki/JSON</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LocationListener extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String deviceCode;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer distance;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double latitude;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Key listenerId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double longitude;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String userId;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getDeviceCode() {
    return deviceCode;
  }

  /**
   * @param deviceCode deviceCode or {@code null} for none
   */
  public LocationListener setDeviceCode(java.lang.String deviceCode) {
    this.deviceCode = deviceCode;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDistance() {
    return distance;
  }

  /**
   * @param distance distance or {@code null} for none
   */
  public LocationListener setDistance(java.lang.Integer distance) {
    this.distance = distance;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }

  /**
   * @param latitude latitude or {@code null} for none
   */
  public LocationListener setLatitude(java.lang.Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public Key getListenerId() {
    return listenerId;
  }

  /**
   * @param listenerId listenerId or {@code null} for none
   */
  public LocationListener setListenerId(Key listenerId) {
    this.listenerId = listenerId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }

  /**
   * @param longitude longitude or {@code null} for none
   */
  public LocationListener setLongitude(java.lang.Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getUserId() {
    return userId;
  }

  /**
   * @param userId userId or {@code null} for none
   */
  public LocationListener setUserId(java.lang.String userId) {
    this.userId = userId;
    return this;
  }

  @Override
  public LocationListener set(String fieldName, Object value) {
    return (LocationListener) super.set(fieldName, value);
  }

  @Override
  public LocationListener clone() {
    return (LocationListener) super.clone();
  }

}
